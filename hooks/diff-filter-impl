#!/bin/bash

# Based on https://github.com/staticfloat/forerunner-buildkite-plugin,
# also see https://github.com/JuliaCI/julia-buildkite/issues/243.

# Initialize the features we need
set -eu
shopt -s extglob
shopt -s globstar

NAME="${BUILDKITE_PLUGIN_DIFF_FILTER_NAME^^}" # ^^ for uppercase
echo "--- Scanning files for ${NAME} diff-filter" >&2

# If we're a pull request, we look at the diff between the current branch tip and the base branch
if [[ "${BUILDKITE_PULL_REQUEST}" != "false" ]]; then
    if [[ ! -v "BUILDKITE_PLUGIN_DIFF_FILTER_GIT_FETCHED" ]]; then
        # The `--force` flags are necessary to be able to deal with rewritten
        # history on the remotes' end when reusing a repository
        git fetch --force origin "${BUILDKITE_PULL_REQUEST_BASE_BRANCH}"
        git fetch --force origin "refs/pull/${BUILDKITE_PULL_REQUEST}/head:refs/remotes/origin/pr/${BUILDKITE_PULL_REQUEST}"

        # Ensure that if this plugin is run multiple times, we don't try to fetch every time
        export BUILDKITE_PLUGIN_DIFF_FILTER_GIT_FETCHED=1
    fi
    TARGET_BRANCH="remotes/origin/${BUILDKITE_PULL_REQUEST_BASE_BRANCH}"
    COMPARE_AGAINST="$(git merge-base ${TARGET_BRANCH} HEAD)"
else
    # If we're not a pull request, just compare with `HEAD~1`.
    COMPARE_AGAINST="$(git rev-parse HEAD~1)"
fi

# Get list of modified files (excluding deletes), store in `MODIFIED_FILES`
# TODO Why ignore deleted?
CURR_HEAD="$(git rev-parse HEAD)"
MODIFIED_FILES=( $(git diff-tree --diff-filter=d --name-only -r "${COMPARE_AGAINST}" HEAD) )

echo "Found ${#MODIFIED_FILES[@]} modified files between ${CURR_HEAD} and ${COMPARE_AGAINST}" >&2
if [[ ! -z "${MODIFIED_FILES[@]}" ]]; then
    printf '\- %s\n' "${MODIFIED_FILES[@]}" >&2
fi

# For each match pattern we've been given, check if any of the modified files matches
MATCH_IDX=0
MATCHED_FILES=()
while [[ -v "BUILDKITE_PLUGIN_DIFF_FILTER_MATCH_${MATCH_IDX}" ]]; do
    # Fetch the match pattern
    MATCH_VARNAME="BUILDKITE_PLUGIN_DIFF_FILTER_MATCH_${MATCH_IDX}"
    MATCH="${!MATCH_VARNAME}"
    # Find matched files
    for FILE in "${MODIFIED_FILES[@]}"; do
        if [[ "${FILE}" == @(${MATCH}) ]]; then
            MATCHED_FILES+=( ${FILE} )
        fi
    done
    MATCH_IDX=$((${MATCH_IDX} + 1))
done

# Filter matched files by ignore patterns
FILTERED_FILES=()
for FILE in "${MATCHED_FILES[@]}"; do
    IGNORE_IDX=0
    SKIP=0
    while [[ -v "BUILDKITE_PLUGIN_DIFF_FILTER_IGNORE_${IGNORE_IDX}" ]]; do
        # Fetch the ignore pattern
        IGNORE_VARNAME="BUILDKITE_PLUGIN_DIFF_FILTER_IGNORE_${IGNORE_IDX}"
        IGNORE="${!IGNORE_VARNAME}"
        if [[ "${FILE}" == @(${IGNORE}) ]]; then
            SKIP=1
            break
        fi
        IGNORE_IDX=$((${IGNORE_IDX} + 1))
    done
    if [[ $SKIP == 0 ]]; then
        FILTERED_FILES+=( ${FILE} )
    fi
done

# Emit trigger variable
declare RESULT
if [[ ! -z "${FILTERED_FILES[@]}" ]]; then
    echo "" >&2
    echo "${#FILTERED_FILES[@]} files remaining after applying diff-filter" >&2
    printf '\- %s\n' "${FILTERED_FILES[@]}" >&2
    RESULT=1
else
    echo "" >&2
    echo "No files remaining after applying diff-filter" >&2
    RESULT=0
fi
echo $RESULT
